<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
    <package name="org.casbin.jcasbin.rbac">
        <interface name="RoleManager" qualified="org.casbin.jcasbin.rbac.RoleManager" scope="public" included="true">
            <method name="clear" signature="()" qualified="org.casbin.jcasbin.rbac.RoleManager.clear" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Clear clears all stored data and resets the role manager to the initial state.</comment>
                <return qualified="void"/>
            </method>
            <method name="addLink" signature="(java.lang.String, java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.rbac.RoleManager.addLink" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>addLink adds the inheritance link between two roles. role: name1 and role: name2.
 domain is a prefix to the roles.</comment>
                <tag name="@param" text="name1 the first role (or user)."/>
                <tag name="@param" text="name2 the second role."/>
                <tag name="@param" text="domain the domain the roles belong to."/>
                <parameter name="name1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="name2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="deleteLink" signature="(java.lang.String, java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.rbac.RoleManager.deleteLink" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>deleteLink deletes the inheritance link between two roles. role: name1 and role: name2.
 domain is a prefix to the roles.</comment>
                <tag name="@param" text="name1 the first role (or user)."/>
                <tag name="@param" text="name2 the second role."/>
                <tag name="@param" text="domain the domain the roles belong to."/>
                <parameter name="name1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="name2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="hasLink" signature="(java.lang.String, java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.rbac.RoleManager.hasLink" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>hasLink determines whether a link exists between two roles. role: name1 inherits role: name2.
 domain is a prefix to the roles.</comment>
                <tag name="@param" text="name1 the first role (or a user)."/>
                <tag name="@param" text="name2 the second role."/>
                <tag name="@param" text="domain the domain the roles belong to."/>
                <tag name="@return" text="whether name1 inherits name2 (name1 has role name2)."/>
                <parameter name="name1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="name2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="getRoles" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.rbac.RoleManager.getRoles" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>getRoles gets the roles that a user inherits.
 domain is a prefix to the roles.</comment>
                <tag name="@param" text="name the user (or a role)."/>
                <tag name="@param" text="domain the domain the roles belong to."/>
                <tag name="@return" text="the roles."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getUsers" signature="(java.lang.String)" qualified="org.casbin.jcasbin.rbac.RoleManager.getUsers" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getUsers gets the users that inherits a role.</comment>
                <tag name="@param" text="name the role."/>
                <tag name="@return" text="the users."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="printRoles" signature="()" qualified="org.casbin.jcasbin.rbac.RoleManager.printRoles" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>printRoles prints all the roles to log.</comment>
                <return qualified="void"/>
            </method>
        </interface>
        <class name="GroupRoleManager" qualified="org.casbin.jcasbin.rbac.GroupRoleManager" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>GroupRoleManager is used for authorization if the user's group is the role who has permission,
 but the group information is in the default format (policy start with "g") and the role information
 is in named format (policy start with "g2", "g3", ...).
 e.g.
 p, admin, domain1, data1, read
 g, alice, group1
 g2, group1, admin, domain1

 As for the previous example, alice should have the permission to read data1, but if we use the
 DefaultRoleManager, it will return false.
 GroupRoleManager is to handle this situation.</comment>
            <class qualified="org.casbin.jcasbin.rbac.DefaultRoleManager"/>
            <constructor name="GroupRoleManager" signature="(int)" qualified="org.casbin.jcasbin.rbac.GroupRoleManager" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>GroupRoleManager is the constructor for creating an instance of the
 GroupRoleManager implementation.</comment>
                <tag name="@param" text="maxHierarchyLevel the maximized allowed RBAC hierarchy level."/>
                <parameter name="maxHierarchyLevel">
                    <type qualified="int"/>
                </parameter>
            </constructor>
            <method name="hasLink" signature="(java.lang.String, java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.rbac.GroupRoleManager.hasLink" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>hasLink determines whether role: name1 inherits role: name2.
 domain is a prefix to the roles.</comment>
                <parameter name="name1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="name2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
        </class>
        <class name="DefaultRoleManager" qualified="org.casbin.jcasbin.rbac.DefaultRoleManager" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <interface qualified="org.casbin.jcasbin.rbac.RoleManager"/>
            <constructor name="DefaultRoleManager" signature="(int)" qualified="org.casbin.jcasbin.rbac.DefaultRoleManager" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>DefaultRoleManager is the constructor for creating an instance of the
 default RoleManager implementation.</comment>
                <tag name="@param" text="maxHierarchyLevel the maximized allowed RBAC hierarchy level."/>
                <parameter name="maxHierarchyLevel">
                    <type qualified="int"/>
                </parameter>
            </constructor>
            <method name="clear" signature="()" qualified="org.casbin.jcasbin.rbac.DefaultRoleManager.clear" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>clear clears all stored data and resets the role manager to the initial state.</comment>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="addLink" signature="(java.lang.String, java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.rbac.DefaultRoleManager.addLink" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>addLink adds the inheritance link between role: name1 and role: name2.
 aka role: name1 inherits role: name2.
 domain is a prefix to the roles.</comment>
                <parameter name="name1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="name2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deleteLink" signature="(java.lang.String, java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.rbac.DefaultRoleManager.deleteLink" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>deleteLink deletes the inheritance link between role: name1 and role: name2.
 aka role: name1 does not inherit role: name2 any more.
 domain is a prefix to the roles.</comment>
                <parameter name="name1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="name2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="hasLink" signature="(java.lang.String, java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.rbac.DefaultRoleManager.hasLink" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>hasLink determines whether role: name1 inherits role: name2.
 domain is a prefix to the roles.</comment>
                <parameter name="name1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="name2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="getRoles" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.rbac.DefaultRoleManager.getRoles" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>getRoles gets the roles that a subject inherits.
 domain is a prefix to the roles.</comment>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="getUsers" signature="(java.lang.String)" qualified="org.casbin.jcasbin.rbac.DefaultRoleManager.getUsers" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getUsers gets the users that inherits a subject.
 domain is an unreferenced parameter here, may be used in other implementations.</comment>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="printRoles" signature="()" qualified="org.casbin.jcasbin.rbac.DefaultRoleManager.printRoles" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>printRoles prints all the roles to log.</comment>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
        </class>
    </package>
    <package name="org.casbin.jcasbin.util">
        <class name="BuiltInFunctions" qualified="org.casbin.jcasbin.util.BuiltInFunctions" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="BuiltInFunctions" signature="()" qualified="org.casbin.jcasbin.util.BuiltInFunctions" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="keyMatch" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.util.BuiltInFunctions.keyMatch" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>keyMatch determines whether key1 matches the pattern of key2 (similar to RESTful path), key2 can contain a *.
 For example, "/foo/bar" matches "/foo/*"</comment>
                <tag name="@param" text="key1 the first argument."/>
                <tag name="@param" text="key2 the second argument."/>
                <tag name="@return" text="whether key1 matches key2."/>
                <parameter name="key1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="key2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="keyMatch2" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.util.BuiltInFunctions.keyMatch2" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>keyMatch2 determines whether key1 matches the pattern of key2 (similar to RESTful path), key2 can contain a *.
 For example, "/foo/bar" matches "/foo/*", "/resource1" matches "/:resource"</comment>
                <tag name="@param" text="key1 the first argument."/>
                <tag name="@param" text="key2 the second argument."/>
                <tag name="@return" text="whether key1 matches key2."/>
                <parameter name="key1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="key2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="keyMatch3" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.util.BuiltInFunctions.keyMatch3" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>keyMatch3 determines whether key1 matches the pattern of key2 (similar to RESTful path), key2 can contain a *.
 For example, "/foo/bar" matches "/foo/*", "/resource1" matches "/{resource}"</comment>
                <tag name="@param" text="key1 the first argument."/>
                <tag name="@param" text="key2 the second argument."/>
                <tag name="@return" text="whether key1 matches key2."/>
                <parameter name="key1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="key2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="regexMatch" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.util.BuiltInFunctions.regexMatch" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>regexMatch determines whether key1 matches the pattern of key2 in regular expression.</comment>
                <tag name="@param" text="key1 the first argument."/>
                <tag name="@param" text="key2 the second argument."/>
                <tag name="@return" text="whether key1 matches key2."/>
                <parameter name="key1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="key2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="ipMatch" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.util.BuiltInFunctions.ipMatch" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>ipMatch determines whether IP address ip1 matches the pattern of IP address ip2, ip2 can be an IP address or a CIDR pattern.
 For example, "192.168.2.123" matches "192.168.2.0/24"</comment>
                <tag name="@param" text="ip1 the first argument."/>
                <tag name="@param" text="ip2 the second argument."/>
                <tag name="@return" text="whether ip1 matches ip2."/>
                <parameter name="ip1">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ip2">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="generateGFunction" signature="(java.lang.String, org.casbin.jcasbin.rbac.RoleManager)" qualified="org.casbin.jcasbin.util.BuiltInFunctions.generateGFunction" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>generateGFunction is the factory method of the g(_, _) function.</comment>
                <tag name="@param" text="name the name of the g(_, _) function, can be &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="rm the role manager used by the function."/>
                <tag name="@return" text="the function."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="rm">
                    <type qualified="org.casbin.jcasbin.rbac.RoleManager"/>
                </parameter>
                <return qualified="com.googlecode.aviator.runtime.type.AviatorFunction"/>
            </method>
        </class>
        <class name="Util" qualified="org.casbin.jcasbin.util.Util" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Util" signature="()" qualified="org.casbin.jcasbin.util.Util" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="logPrint" signature="(java.lang.String)" qualified="org.casbin.jcasbin.util.Util.logPrint" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>logPrint prints the log.</comment>
                <tag name="@param" text="v the log."/>
                <parameter name="v">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="logPrintf" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.util.Util.logPrintf" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="true">
                <comment>logPrintf prints the log with the format.</comment>
                <tag name="@param" text="format the format of the log."/>
                <tag name="@param" text="v the log."/>
                <parameter name="format">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="v">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="logPrintfWarn" signature="(java.lang.String, java.lang.Object...)" qualified="org.casbin.jcasbin.util.Util.logPrintfWarn" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="true">
                <comment>logPrintf prints the log with the format as a warning.</comment>
                <tag name="@param" text="format the format of the log."/>
                <tag name="@param" text="v the log."/>
                <parameter name="format">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="v">
                    <type qualified="java.lang.Object" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="logPrintfError" signature="(java.lang.String, java.lang.Object...)" qualified="org.casbin.jcasbin.util.Util.logPrintfError" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="true">
                <comment>logPrintf prints the log with the format as an error.</comment>
                <tag name="@param" text="format the format of the log."/>
                <tag name="@param" text="v the log."/>
                <parameter name="format">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="v">
                    <type qualified="java.lang.Object" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="escapeAssertion" signature="(java.lang.String)" qualified="org.casbin.jcasbin.util.Util.escapeAssertion" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>escapeAssertion escapes the dots in the assertion, because the expression evaluation doesn't support such variable names.</comment>
                <tag name="@param" text="s the value of the matcher and effect assertions."/>
                <tag name="@return" text="the escaped value."/>
                <parameter name="s">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.lang.String"/>
            </method>
            <method name="removeComments" signature="(java.lang.String)" qualified="org.casbin.jcasbin.util.Util.removeComments" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>removeComments removes the comments starting with # in the text.</comment>
                <tag name="@param" text="s a line in the model."/>
                <tag name="@return" text="the line without comments."/>
                <parameter name="s">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.lang.String"/>
            </method>
            <method name="arrayEquals" signature="(java.util.List&lt;java.lang.String&gt;, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.util.Util.arrayEquals" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>arrayEquals determines whether two string arrays are identical.</comment>
                <tag name="@param" text="a the first array."/>
                <tag name="@param" text="b the second array."/>
                <tag name="@return" text="whether a equals to b."/>
                <parameter name="a">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <parameter name="b">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="array2DEquals" signature="(java.util.List&lt;java.util.List&lt;java.lang.String&gt;&gt;, java.util.List&lt;java.util.List&lt;java.lang.String&gt;&gt;)" qualified="org.casbin.jcasbin.util.Util.array2DEquals" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>array2DEquals determines whether two 2-dimensional string arrays are identical.</comment>
                <tag name="@param" text="a the first 2-dimensional array."/>
                <tag name="@param" text="b the second 2-dimensional array."/>
                <tag name="@return" text="whether a equals to b."/>
                <parameter name="a">
                    <type qualified="java.util.List">
                        <generic qualified="java.util.List">
                            <generic qualified="java.lang.String"/>
                        </generic>
                    </type>
                </parameter>
                <parameter name="b">
                    <type qualified="java.util.List">
                        <generic qualified="java.util.List">
                            <generic qualified="java.lang.String"/>
                        </generic>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="arrayRemoveDuplicates" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.util.Util.arrayRemoveDuplicates" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>arrayRemoveDuplicates removes any duplicated elements in a string array.</comment>
                <tag name="@param" text="s the array."/>
                <tag name="@return" text="the array without duplicates."/>
                <parameter name="s">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="arrayToString" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.util.Util.arrayToString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>arrayToString gets a printable string for a string array.</comment>
                <tag name="@param" text="s the array."/>
                <tag name="@return" text="the string joined by the array elements."/>
                <parameter name="s">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="java.lang.String"/>
            </method>
            <method name="paramsToString" signature="(java.lang.String[])" qualified="org.casbin.jcasbin.util.Util.paramsToString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>paramsToString gets a printable string for variable number of parameters.</comment>
                <tag name="@param" text="s the parameters."/>
                <tag name="@return" text="the string joined by the parameters."/>
                <parameter name="s">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.lang.String"/>
            </method>
            <method name="setEquals" signature="(java.util.List&lt;java.lang.String&gt;, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.util.Util.setEquals" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>setEquals determines whether two string sets are identical.</comment>
                <tag name="@param" text="a the first set."/>
                <tag name="@param" text="b the second set."/>
                <tag name="@return" text="whether a equals to b."/>
                <parameter name="a">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <parameter name="b">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <field name="enableLog" qualified="org.casbin.jcasbin.util.Util.enableLog" scope="public" volatile="false" transient="false" static="true" final="false">
                <type qualified="boolean"/>
            </field>
        </class>
    </package>
    <package name="org.casbin.jcasbin.util.function">
        <class name="KeyMatch2Func" qualified="org.casbin.jcasbin.util.function.KeyMatch2Func" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>KeyMatch2Func is the wrapper for keyMatch2.</comment>
            <class qualified="com.googlecode.aviator.runtime.function.AbstractFunction"/>
            <constructor name="KeyMatch2Func" signature="()" qualified="org.casbin.jcasbin.util.function.KeyMatch2Func" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="call" signature="(java.util.Map&lt;java.lang.String, java.lang.Object&gt;, com.googlecode.aviator.runtime.type.AviatorObject, com.googlecode.aviator.runtime.type.AviatorObject)" qualified="org.casbin.jcasbin.util.function.KeyMatch2Func.call" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="env">
                    <type qualified="java.util.Map">
                        <generic qualified="java.lang.String"/>
                        <generic qualified="java.lang.Object"/>
                    </type>
                </parameter>
                <parameter name="arg1">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <parameter name="arg2">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <return qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
            </method>
            <method name="getName" signature="()" qualified="org.casbin.jcasbin.util.function.KeyMatch2Func.getName" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
            </method>
        </class>
        <class name="KeyMatch3Func" qualified="org.casbin.jcasbin.util.function.KeyMatch3Func" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>KeyMatch3Func is the wrapper for keyMatch2.</comment>
            <class qualified="com.googlecode.aviator.runtime.function.AbstractFunction"/>
            <constructor name="KeyMatch3Func" signature="()" qualified="org.casbin.jcasbin.util.function.KeyMatch3Func" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="call" signature="(java.util.Map&lt;java.lang.String, java.lang.Object&gt;, com.googlecode.aviator.runtime.type.AviatorObject, com.googlecode.aviator.runtime.type.AviatorObject)" qualified="org.casbin.jcasbin.util.function.KeyMatch3Func.call" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="env">
                    <type qualified="java.util.Map">
                        <generic qualified="java.lang.String"/>
                        <generic qualified="java.lang.Object"/>
                    </type>
                </parameter>
                <parameter name="arg1">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <parameter name="arg2">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <return qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
            </method>
            <method name="getName" signature="()" qualified="org.casbin.jcasbin.util.function.KeyMatch3Func.getName" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
            </method>
        </class>
        <class name="RegexMatchFunc" qualified="org.casbin.jcasbin.util.function.RegexMatchFunc" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>RegexMatchFunc is the wrapper for regexMatch.</comment>
            <class qualified="com.googlecode.aviator.runtime.function.AbstractFunction"/>
            <constructor name="RegexMatchFunc" signature="()" qualified="org.casbin.jcasbin.util.function.RegexMatchFunc" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="call" signature="(java.util.Map&lt;java.lang.String, java.lang.Object&gt;, com.googlecode.aviator.runtime.type.AviatorObject, com.googlecode.aviator.runtime.type.AviatorObject)" qualified="org.casbin.jcasbin.util.function.RegexMatchFunc.call" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="env">
                    <type qualified="java.util.Map">
                        <generic qualified="java.lang.String"/>
                        <generic qualified="java.lang.Object"/>
                    </type>
                </parameter>
                <parameter name="arg1">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <parameter name="arg2">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <return qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
            </method>
            <method name="getName" signature="()" qualified="org.casbin.jcasbin.util.function.RegexMatchFunc.getName" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
            </method>
        </class>
        <class name="IPMatchFunc" qualified="org.casbin.jcasbin.util.function.IPMatchFunc" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>IPMatchFunc is the wrapper for ipMatch.</comment>
            <class qualified="com.googlecode.aviator.runtime.function.AbstractFunction"/>
            <constructor name="IPMatchFunc" signature="()" qualified="org.casbin.jcasbin.util.function.IPMatchFunc" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="call" signature="(java.util.Map&lt;java.lang.String, java.lang.Object&gt;, com.googlecode.aviator.runtime.type.AviatorObject, com.googlecode.aviator.runtime.type.AviatorObject)" qualified="org.casbin.jcasbin.util.function.IPMatchFunc.call" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="env">
                    <type qualified="java.util.Map">
                        <generic qualified="java.lang.String"/>
                        <generic qualified="java.lang.Object"/>
                    </type>
                </parameter>
                <parameter name="arg1">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <parameter name="arg2">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <return qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
            </method>
            <method name="getName" signature="()" qualified="org.casbin.jcasbin.util.function.IPMatchFunc.getName" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
            </method>
        </class>
        <class name="KeyMatchFunc" qualified="org.casbin.jcasbin.util.function.KeyMatchFunc" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>KeyMatchFunc is the wrapper for keyMatch.</comment>
            <class qualified="com.googlecode.aviator.runtime.function.AbstractFunction"/>
            <constructor name="KeyMatchFunc" signature="()" qualified="org.casbin.jcasbin.util.function.KeyMatchFunc" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="call" signature="(java.util.Map&lt;java.lang.String, java.lang.Object&gt;, com.googlecode.aviator.runtime.type.AviatorObject, com.googlecode.aviator.runtime.type.AviatorObject)" qualified="org.casbin.jcasbin.util.function.KeyMatchFunc.call" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="env">
                    <type qualified="java.util.Map">
                        <generic qualified="java.lang.String"/>
                        <generic qualified="java.lang.Object"/>
                    </type>
                </parameter>
                <parameter name="arg1">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <parameter name="arg2">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
                </parameter>
                <return qualified="com.googlecode.aviator.runtime.type.AviatorObject"/>
            </method>
            <method name="getName" signature="()" qualified="org.casbin.jcasbin.util.function.KeyMatchFunc.getName" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <return qualified="java.lang.String"/>
            </method>
        </class>
    </package>
    <package name="org.casbin.jcasbin.config">
        <class name="Config" qualified="org.casbin.jcasbin.config.Config" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <method name="newConfig" signature="(java.lang.String)" qualified="org.casbin.jcasbin.config.Config.newConfig" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>newConfig create an empty configuration representation from file.</comment>
                <tag name="@param" text="confName the path of the model file."/>
                <tag name="@return" text="the constructor of Config."/>
                <parameter name="confName">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="org.casbin.jcasbin.config.Config"/>
            </method>
            <method name="newConfigFromText" signature="(java.lang.String)" qualified="org.casbin.jcasbin.config.Config.newConfigFromText" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>newConfigFromText create an empty configuration representation from text.</comment>
                <tag name="@param" text="text the model text."/>
                <tag name="@return" text="the constructor of Config."/>
                <parameter name="text">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="org.casbin.jcasbin.config.Config"/>
            </method>
            <method name="getBool" signature="(java.lang.String)" qualified="org.casbin.jcasbin.config.Config.getBool" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="key">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="getInt" signature="(java.lang.String)" qualified="org.casbin.jcasbin.config.Config.getInt" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="key">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="int"/>
            </method>
            <method name="getFloat" signature="(java.lang.String)" qualified="org.casbin.jcasbin.config.Config.getFloat" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="key">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="float"/>
            </method>
            <method name="getString" signature="(java.lang.String)" qualified="org.casbin.jcasbin.config.Config.getString" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="key">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.lang.String"/>
            </method>
            <method name="getStrings" signature="(java.lang.String)" qualified="org.casbin.jcasbin.config.Config.getStrings" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="key">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.lang.String" dimension="[]"/>
            </method>
            <method name="set" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.config.Config.set" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="key">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="value">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="get" signature="(java.lang.String)" qualified="org.casbin.jcasbin.config.Config.get" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="key">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.lang.String"/>
            </method>
        </class>
    </package>
    <package name="org.casbin.jcasbin.effect">
        <enum name="Effect" qualified="org.casbin.jcasbin.effect.Effect" scope="public" included="true">
            <class qualified="java.lang.Enum">
                <generic qualified="org.casbin.jcasbin.effect.Effect"/>
            </class>
            <constant name="Allow"/>
            <constant name="Indeterminate"/>
            <constant name="Deny"/>
        </enum>
        <interface name="Effector" qualified="org.casbin.jcasbin.effect.Effector" scope="public" included="true">
            <comment>Effector is the interface for Casbin effectors.</comment>
            <method name="mergeEffects" signature="(java.lang.String, org.casbin.jcasbin.effect.Effect[], float[])" qualified="org.casbin.jcasbin.effect.Effector.mergeEffects" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>mergeEffects merges all matching results collected by the enforcer into a single decision.</comment>
                <tag name="@param" text="expr the expression of [policy_effect]."/>
                <tag name="@param" text="effects the effects of all matched rules."/>
                <tag name="@param" text="results the matcher results of all matched rules."/>
                <tag name="@return" text="the final effect."/>
                <parameter name="expr">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="effects">
                    <type qualified="org.casbin.jcasbin.effect.Effect" dimension="[]"/>
                </parameter>
                <parameter name="results">
                    <type qualified="float" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
        </interface>
        <class name="DefaultEffector" qualified="org.casbin.jcasbin.effect.DefaultEffector" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>DefaultEffector is default effector for Casbin.</comment>
            <class qualified="java.lang.Object"/>
            <interface qualified="org.casbin.jcasbin.effect.Effector"/>
            <constructor name="DefaultEffector" signature="()" qualified="org.casbin.jcasbin.effect.DefaultEffector" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>DefaultEffector is the constructor for DefaultEffector.</comment>
            </constructor>
            <method name="mergeEffects" signature="(java.lang.String, org.casbin.jcasbin.effect.Effect[], float[])" qualified="org.casbin.jcasbin.effect.DefaultEffector.mergeEffects" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>mergeEffects merges all matching results collected by the enforcer into a single decision.</comment>
                <parameter name="expr">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="effects">
                    <type qualified="org.casbin.jcasbin.effect.Effect" dimension="[]"/>
                </parameter>
                <parameter name="results">
                    <type qualified="float" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
        </class>
    </package>
    <package name="org.casbin.jcasbin.model">
        <class name="Model" qualified="org.casbin.jcasbin.model.Model" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>Model represents the whole access control model.</comment>
            <class qualified="org.casbin.jcasbin.model.Policy"/>
            <constructor name="Model" signature="()" qualified="org.casbin.jcasbin.model.Model" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="addDef" signature="(java.lang.String, java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.model.Model.addDef" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addDef adds an assertion to the model.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="key the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="value the policy rule, separated by &quot;, &quot;."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="key">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="value">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="loadModel" signature="(java.lang.String)" qualified="org.casbin.jcasbin.model.Model.loadModel" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>loadModel loads the model from model CONF file.</comment>
                <tag name="@param" text="path the path of the model file."/>
                <parameter name="path">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="loadModelFromText" signature="(java.lang.String)" qualified="org.casbin.jcasbin.model.Model.loadModelFromText" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>loadModelFromText loads the model from the text.</comment>
                <tag name="@param" text="text the model text."/>
                <parameter name="text">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="saveModelToText" signature="()" qualified="org.casbin.jcasbin.model.Model.saveModelToText" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>saveModelToText saves the model to the text.</comment>
                <tag name="@return" text="the model text."/>
                <return qualified="java.lang.String"/>
            </method>
            <method name="printModel" signature="()" qualified="org.casbin.jcasbin.model.Model.printModel" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>printModel prints the model to the log.</comment>
                <return qualified="void"/>
            </method>
        </class>
        <class name="Policy" qualified="org.casbin.jcasbin.model.Policy" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Policy" signature="()" qualified="org.casbin.jcasbin.model.Policy" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="buildRoleLinks" signature="(org.casbin.jcasbin.rbac.RoleManager)" qualified="org.casbin.jcasbin.model.Policy.buildRoleLinks" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>buildRoleLinks initializes the roles in RBAC.</comment>
                <tag name="@param" text="rm the role manager."/>
                <parameter name="rm">
                    <type qualified="org.casbin.jcasbin.rbac.RoleManager"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="printPolicy" signature="()" qualified="org.casbin.jcasbin.model.Policy.printPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>printPolicy prints the policy to log.</comment>
                <return qualified="void"/>
            </method>
            <method name="savePolicyToText" signature="()" qualified="org.casbin.jcasbin.model.Policy.savePolicyToText" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>savePolicyToText saves the policy to the text.</comment>
                <tag name="@return" text="the policy text."/>
                <return qualified="java.lang.String"/>
            </method>
            <method name="clearPolicy" signature="()" qualified="org.casbin.jcasbin.model.Policy.clearPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>clearPolicy clears all current policy.</comment>
                <return qualified="void"/>
            </method>
            <method name="getPolicy" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.model.Policy.getPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getPolicy gets all rules in a policy.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@return" text="the policy rules of section sec and policy type ptype."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="getFilteredPolicy" signature="(java.lang.String, java.lang.String, int, java.lang.String...)" qualified="org.casbin.jcasbin.model.Policy.getFilteredPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>getFilteredPolicy gets rules based on field filters from a policy.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <tag name="@return" text="the filtered policy rules of section sec and policy type ptype."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="hasPolicy" signature="(java.lang.String, java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.model.Policy.hasPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>hasPolicy determines whether a model has the specified policy rule.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="rule the policy rule."/>
                <tag name="@return" text="whether the rule exists."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="rule">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addPolicy" signature="(java.lang.String, java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.model.Policy.addPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addPolicy adds a policy rule to the model.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="rule the policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="rule">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removePolicy" signature="(java.lang.String, java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.model.Policy.removePolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>removePolicy removes a policy rule from the model.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="rule the policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="rule">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeFilteredPolicy" signature="(java.lang.String, java.lang.String, int, java.lang.String...)" qualified="org.casbin.jcasbin.model.Policy.removeFilteredPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeFilteredPolicy removes policy rules based on field filters from the model.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="getValuesForFieldInPolicy" signature="(java.lang.String, java.lang.String, int)" qualified="org.casbin.jcasbin.model.Policy.getValuesForFieldInPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getValuesForFieldInPolicy gets all values for a field for all rules in a policy, duplicated values are removed.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="fieldIndex the policy rule's index."/>
                <tag name="@return" text="the field values specified by fieldIndex."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <field name="model" qualified="org.casbin.jcasbin.model.Policy.model" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Map">
                    <generic qualified="java.lang.String"/>
                    <generic qualified="java.util.Map">
                        <generic qualified="java.lang.String"/>
                        <generic qualified="org.casbin.jcasbin.model.Assertion"/>
                    </generic>
                </type>
            </field>
        </class>
        <class name="FunctionMap" qualified="org.casbin.jcasbin.model.FunctionMap" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>FunctionMap represents the collection of Function.</comment>
            <class qualified="java.lang.Object"/>
            <constructor name="FunctionMap" signature="()" qualified="org.casbin.jcasbin.model.FunctionMap" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="addFunction" signature="(java.lang.String, com.googlecode.aviator.runtime.type.AviatorFunction)" qualified="org.casbin.jcasbin.model.FunctionMap.addFunction" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addFunction adds an expression function.</comment>
                <tag name="@param" text="name the name of the new function."/>
                <tag name="@param" text="function the function."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="function">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorFunction"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="loadFunctionMap" signature="()" qualified="org.casbin.jcasbin.model.FunctionMap.loadFunctionMap" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>loadFunctionMap loads an initial function map.</comment>
                <tag name="@return" text="the constructor of FunctionMap."/>
                <return qualified="org.casbin.jcasbin.model.FunctionMap"/>
            </method>
            <field name="fm" qualified="org.casbin.jcasbin.model.FunctionMap.fm" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.Map">
                    <generic qualified="java.lang.String"/>
                    <generic qualified="com.googlecode.aviator.runtime.type.AviatorFunction"/>
                </type>
                <comment>AviatorFunction represents a function that is used in the matchers, used to get attributes in ABAC.</comment>
            </field>
        </class>
        <class name="Assertion" qualified="org.casbin.jcasbin.model.Assertion" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>Assertion represents an expression in a section of the model.
 For example: r = sub, obj, act</comment>
            <class qualified="java.lang.Object"/>
            <constructor name="Assertion" signature="()" qualified="org.casbin.jcasbin.model.Assertion" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="buildRoleLinks" signature="(org.casbin.jcasbin.rbac.RoleManager)" qualified="org.casbin.jcasbin.model.Assertion.buildRoleLinks" scope="protected" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="rm">
                    <type qualified="org.casbin.jcasbin.rbac.RoleManager"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <field name="key" qualified="org.casbin.jcasbin.model.Assertion.key" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="value" qualified="org.casbin.jcasbin.model.Assertion.value" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String"/>
            </field>
            <field name="tokens" qualified="org.casbin.jcasbin.model.Assertion.tokens" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.lang.String" dimension="[]"/>
            </field>
            <field name="policy" qualified="org.casbin.jcasbin.model.Assertion.policy" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </type>
            </field>
            <field name="rm" qualified="org.casbin.jcasbin.model.Assertion.rm" scope="public" volatile="false" transient="false" static="false" final="false">
                <type qualified="org.casbin.jcasbin.rbac.RoleManager"/>
            </field>
        </class>
    </package>
    <package name="org.casbin.jcasbin.main">
        <class name="Enforcer" qualified="org.casbin.jcasbin.main.Enforcer" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>Enforcer = ManagementEnforcer + RBAC API.</comment>
            <class qualified="org.casbin.jcasbin.main.ManagementEnforcer"/>
            <constructor name="Enforcer" signature="()" qualified="org.casbin.jcasbin.main.Enforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Enforcer is the default constructor.</comment>
            </constructor>
            <constructor name="Enforcer" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Enforcer initializes an enforcer with a model file and a policy file.</comment>
                <tag name="@param" text="modelPath the path of the model file."/>
                <tag name="@param" text="policyFile the path of the policy file."/>
                <parameter name="modelPath">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="policyFile">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
            <constructor name="Enforcer" signature="(java.lang.String, org.casbin.jcasbin.persist.Adapter)" qualified="org.casbin.jcasbin.main.Enforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Enforcer initializes an enforcer with a database adapter.</comment>
                <tag name="@param" text="modelPath the path of the model file."/>
                <tag name="@param" text="adapter the adapter."/>
                <parameter name="modelPath">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="adapter">
                    <type qualified="org.casbin.jcasbin.persist.Adapter"/>
                </parameter>
            </constructor>
            <constructor name="Enforcer" signature="(org.casbin.jcasbin.model.Model, org.casbin.jcasbin.persist.Adapter)" qualified="org.casbin.jcasbin.main.Enforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Enforcer initializes an enforcer with a model and a database adapter.</comment>
                <tag name="@param" text="m the model."/>
                <tag name="@param" text="adapter the adapter."/>
                <parameter name="m">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
                <parameter name="adapter">
                    <type qualified="org.casbin.jcasbin.persist.Adapter"/>
                </parameter>
            </constructor>
            <constructor name="Enforcer" signature="(org.casbin.jcasbin.model.Model)" qualified="org.casbin.jcasbin.main.Enforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Enforcer initializes an enforcer with a model.</comment>
                <tag name="@param" text="m the model."/>
                <parameter name="m">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
            </constructor>
            <constructor name="Enforcer" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Enforcer initializes an enforcer with a model file.</comment>
                <tag name="@param" text="modelPath the path of the model file."/>
                <parameter name="modelPath">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
            <constructor name="Enforcer" signature="(java.lang.String, java.lang.String, boolean)" qualified="org.casbin.jcasbin.main.Enforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Enforcer initializes an enforcer with a model file, a policy file and an enable log flag.</comment>
                <tag name="@param" text="modelPath the path of the model file."/>
                <tag name="@param" text="policyFile the path of the policy file."/>
                <tag name="@param" text="enableLog whether to enable Casbin's log."/>
                <parameter name="modelPath">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="policyFile">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="enableLog">
                    <type qualified="boolean"/>
                </parameter>
            </constructor>
            <method name="getRolesForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.getRolesForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getRolesForUser gets the roles that a user has.</comment>
                <tag name="@param" text="name the user."/>
                <tag name="@return" text="the roles that the user has."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getUsersForRole" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.getUsersForRole" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getUsersForRole gets the users that has a role.</comment>
                <tag name="@param" text="name the role."/>
                <tag name="@return" text="the users that has the role."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="hasRoleForUser" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.hasRoleForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>hasRoleForUser determines whether a user has a role.</comment>
                <tag name="@param" text="name the user."/>
                <tag name="@param" text="role the role."/>
                <tag name="@return" text="whether the user has the role."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addRoleForUser" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.addRoleForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addRoleForUser adds a role for a user.
 Returns false if the user already has the role (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="role the role."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="deleteRoleForUser" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.deleteRoleForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteRoleForUser deletes a role for a user.
 Returns false if the user does not have the role (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="role the role."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="deleteRolesForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.deleteRolesForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteRolesForUser deletes all roles for a user.
 Returns false if the user does not have any roles (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="deleteUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.deleteUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteUser deletes a user.
 Returns false if the user does not exist (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="deleteRole" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.deleteRole" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteRole deletes a role.</comment>
                <tag name="@param" text="role the role."/>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="deletePermission" signature="(java.lang.String...)" qualified="org.casbin.jcasbin.main.Enforcer.deletePermission" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>deletePermission deletes a permission.
 Returns false if the permission does not exist (aka not affected).</comment>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="permission">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="deletePermission" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.Enforcer.deletePermission" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deletePermission deletes a permission.
 Returns false if the permission does not exist (aka not affected).</comment>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="permission">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addPermissionForUser" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.Enforcer.addPermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>addPermissionForUser adds a permission for a user or role.
 Returns false if the user or role already has the permission (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addPermissionForUser" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.Enforcer.addPermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addPermissionForUser adds a permission for a user or role.
 Returns false if the user or role already has the permission (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="deletePermissionForUser" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.Enforcer.deletePermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>deletePermissionForUser deletes a permission for a user or role.
 Returns false if the user or role does not have the permission (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="deletePermissionForUser" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.Enforcer.deletePermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deletePermissionForUser deletes a permission for a user or role.
 Returns false if the user or role does not have the permission (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="deletePermissionsForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.deletePermissionsForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deletePermissionsForUser deletes permissions for a user or role.
 Returns false if the user or role does not have any permissions (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="getPermissionsForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.getPermissionsForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getPermissionsForUser gets permissions for a user or role.</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="the permissions, a permission is usually like (obj, act). It is actually the rule without the subject."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="hasPermissionForUser" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.Enforcer.hasPermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>hasPermissionForUser determines whether a user has a permission.</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="whether the user has the permission."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="hasPermissionForUser" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.Enforcer.hasPermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>hasPermissionForUser determines whether a user has a permission.</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="whether the user has the permission."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="getRolesForUserInDomain" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.getRolesForUserInDomain" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getRolesForUserInDomain gets the roles that a user has inside a domain.</comment>
                <tag name="@param" text="name the user."/>
                <tag name="@param" text="domain the domain."/>
                <tag name="@return" text="the roles that the user has in the domain."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getPermissionsForUserInDomain" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.getPermissionsForUserInDomain" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getPermissionsForUserInDomain gets permissions for a user or role inside a domain.</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="domain the domain."/>
                <tag name="@return" text="the permissions, a permission is usually like (obj, act). It is actually the rule without the subject."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="addRoleForUserInDomain" signature="(java.lang.String, java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.addRoleForUserInDomain" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addRoleForUserInDomain adds a role for a user inside a domain.
 Returns false if the user already has the role (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="role the role."/>
                <tag name="@param" text="domain the domain."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="deleteRoleForUserInDomain" signature="(java.lang.String, java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.deleteRoleForUserInDomain" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteRoleForUserInDomain deletes a role for a user inside a domain.
 Returns false if the user does not have the role (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="role the role."/>
                <tag name="@param" text="domain the domain."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="getImplicitRolesForUser" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.Enforcer.getImplicitRolesForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>getImplicitRolesForUser gets implicit roles that a user has.
 Compared to getRolesForUser(), this function retrieves indirect roles besides direct roles.
 For example:
 g, alice, role:admin
 g, role:admin, role:user
 &lt;p&gt;
 getRolesForUser("alice") can only get: ["role:admin"].
 But getImplicitRolesForUser("alice") will get: ["role:admin", "role:user"].</comment>
                <tag name="@param" text="name   the user"/>
                <tag name="@param" text="domain the domain"/>
                <tag name="@return" text="implicit roles that a user has."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getImplicitPermissionsForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.getImplicitPermissionsForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getImplicitPermissionsForUser gets implicit permissions for a user or role.
 Compared to getPermissionsForUser(), this function retrieves permissions for inherited roles.
 For example:
 p, admin, data1, read
 p, alice, data2, read
 g, alice, admin
 &lt;p&gt;
 getPermissionsForUser("alice") can only get: [["alice", "data2", "read"]].
 But getImplicitPermissionsForUser("alice") will get: [["admin", "data1", "read"], ["alice", "data2", "read"]].</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="implicit permissions for a user or role."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="getImplicitPermissionsForUserInDomain" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.Enforcer.getImplicitPermissionsForUserInDomain" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getImplicitPermissionsForUserInDomain gets implicit permissions for a user or role in domain.</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="domain the domain."/>
                <tag name="@return" text="implicit permissions for a user or role in domain."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
        </class>
        <class name="CoreEnforcer" qualified="org.casbin.jcasbin.main.CoreEnforcer" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>CoreEnforcer defines the core functionality of an enforcer.</comment>
            <class qualified="java.lang.Object"/>
            <constructor name="CoreEnforcer" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="newModel" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer.newModel" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>newModel creates a model.</comment>
                <tag name="@return" text="an empty model."/>
                <return qualified="org.casbin.jcasbin.model.Model"/>
            </method>
            <method name="newModel" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.CoreEnforcer.newModel" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>newModel creates a model.</comment>
                <tag name="@param" text="text the model text."/>
                <tag name="@return" text="the model."/>
                <parameter name="text">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="org.casbin.jcasbin.model.Model"/>
            </method>
            <method name="newModel" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.CoreEnforcer.newModel" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <comment>newModel creates a model.</comment>
                <tag name="@param" text="modelPath the path of the model file."/>
                <tag name="@param" text="unused unused parameter, just for differentiating with&#xA;               newModel(String text)."/>
                <tag name="@return" text="the model."/>
                <parameter name="modelPath">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="unused">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="org.casbin.jcasbin.model.Model"/>
            </method>
            <method name="loadModel" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer.loadModel" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>loadModel reloads the model from the model CONF file.
 Because the policy is attached to a model, so the policy is invalidated
 and needs to be reloaded by calling LoadPolicy().</comment>
                <return qualified="void"/>
            </method>
            <method name="getModel" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer.getModel" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getModel gets the current model.</comment>
                <tag name="@return" text="the model of the enforcer."/>
                <return qualified="org.casbin.jcasbin.model.Model"/>
            </method>
            <method name="setModel" signature="(org.casbin.jcasbin.model.Model)" qualified="org.casbin.jcasbin.main.CoreEnforcer.setModel" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>setModel sets the current model.</comment>
                <tag name="@param" text="model the model."/>
                <parameter name="model">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="getAdapter" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer.getAdapter" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getAdapter gets the current adapter.</comment>
                <tag name="@return" text="the adapter of the enforcer."/>
                <return qualified="org.casbin.jcasbin.persist.Adapter"/>
            </method>
            <method name="setAdapter" signature="(org.casbin.jcasbin.persist.Adapter)" qualified="org.casbin.jcasbin.main.CoreEnforcer.setAdapter" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>setAdapter sets the current adapter.</comment>
                <tag name="@param" text="adapter the adapter."/>
                <parameter name="adapter">
                    <type qualified="org.casbin.jcasbin.persist.Adapter"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="setWatcher" signature="(org.casbin.jcasbin.persist.Watcher)" qualified="org.casbin.jcasbin.main.CoreEnforcer.setWatcher" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>setWatcher sets the current watcher.</comment>
                <tag name="@param" text="watcher the watcher."/>
                <parameter name="watcher">
                    <type qualified="org.casbin.jcasbin.persist.Watcher"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="setRoleManager" signature="(org.casbin.jcasbin.rbac.RoleManager)" qualified="org.casbin.jcasbin.main.CoreEnforcer.setRoleManager" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>SetRoleManager sets the current role manager.</comment>
                <tag name="@param" text="rm the role manager."/>
                <parameter name="rm">
                    <type qualified="org.casbin.jcasbin.rbac.RoleManager"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="setEffector" signature="(org.casbin.jcasbin.effect.Effector)" qualified="org.casbin.jcasbin.main.CoreEnforcer.setEffector" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>setEffector sets the current effector.</comment>
                <tag name="@param" text="eft the effector."/>
                <parameter name="eft">
                    <type qualified="org.casbin.jcasbin.effect.Effector"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="clearPolicy" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer.clearPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>clearPolicy clears all policy.</comment>
                <return qualified="void"/>
            </method>
            <method name="loadPolicy" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer.loadPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>loadPolicy reloads the policy from file/database.</comment>
                <return qualified="void"/>
            </method>
            <method name="loadFilteredPolicy" signature="(java.lang.Object)" qualified="org.casbin.jcasbin.main.CoreEnforcer.loadFilteredPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>loadFilteredPolicy reloads a filtered policy from file/database.</comment>
                <tag name="@param" text="filter the filter used to specify which type of policy should be loaded."/>
                <parameter name="filter">
                    <type qualified="java.lang.Object"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="isFiltered" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer.isFiltered" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>isFiltered returns true if the loaded policy has been filtered.</comment>
                <tag name="@return" text="if the loaded policy has been filtered."/>
                <return qualified="boolean"/>
            </method>
            <method name="savePolicy" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer.savePolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>savePolicy saves the current policy (usually after changed with
 Casbin API) back to file/database.</comment>
                <return qualified="void"/>
            </method>
            <method name="enableEnforce" signature="(boolean)" qualified="org.casbin.jcasbin.main.CoreEnforcer.enableEnforce" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>enableEnforce changes the enforcing state of Casbin, when Casbin is
 disabled, all access will be allowed by the enforce() function.</comment>
                <tag name="@param" text="enable whether to enable the enforcer."/>
                <parameter name="enable">
                    <type qualified="boolean"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="enableLog" signature="(boolean)" qualified="org.casbin.jcasbin.main.CoreEnforcer.enableLog" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>enableLog changes whether to print Casbin log to the standard output.</comment>
                <tag name="@param" text="enable whether to enable Casbin's log."/>
                <parameter name="enable">
                    <type qualified="boolean"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="enableAutoSave" signature="(boolean)" qualified="org.casbin.jcasbin.main.CoreEnforcer.enableAutoSave" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>enableAutoSave controls whether to save a policy rule automatically to
 the adapter when it is added or removed.</comment>
                <tag name="@param" text="autoSave whether to enable the AutoSave feature."/>
                <parameter name="autoSave">
                    <type qualified="boolean"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="enableAutoBuildRoleLinks" signature="(boolean)" qualified="org.casbin.jcasbin.main.CoreEnforcer.enableAutoBuildRoleLinks" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>enableAutoBuildRoleLinks controls whether to save a policy rule
 automatically to the adapter when it is added or removed.</comment>
                <tag name="@param" text="autoBuildRoleLinks whether to automatically build the role links."/>
                <parameter name="autoBuildRoleLinks">
                    <type qualified="boolean"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="buildRoleLinks" signature="()" qualified="org.casbin.jcasbin.main.CoreEnforcer.buildRoleLinks" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>buildRoleLinks manually rebuild the
 role inheritance relations.</comment>
                <return qualified="void"/>
            </method>
            <method name="enforce" signature="(java.lang.Object...)" qualified="org.casbin.jcasbin.main.CoreEnforcer.enforce" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>enforce decides whether a "subject" can access a "object" with
 the operation "action", input parameters are usually: (sub, obj, act).</comment>
                <tag name="@param" text="rvals the request needs to be mediated, usually an array&#xA;              of strings, can be class instances if ABAC is used."/>
                <tag name="@return" text="whether to allow the request."/>
                <parameter name="rvals">
                    <type qualified="java.lang.Object" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="validateEnforce" signature="(java.lang.Object...)" qualified="org.casbin.jcasbin.main.CoreEnforcer.validateEnforce" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <parameter name="rvals">
                    <type qualified="java.lang.Object" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
        </class>
        <class name="SyncedEnforcer" qualified="org.casbin.jcasbin.main.SyncedEnforcer" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>SyncedEnforcer = ManagementEnforcer + RBAC API.</comment>
            <class qualified="org.casbin.jcasbin.main.Enforcer"/>
            <constructor name="SyncedEnforcer" signature="()" qualified="org.casbin.jcasbin.main.SyncedEnforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>;
 SyncedEnforcer is the default constructor.</comment>
            </constructor>
            <constructor name="SyncedEnforcer" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>SyncedEnforcer initializes an enforcer with a model file and a policy file.</comment>
                <tag name="@param" text="modelPath  the path of the model file."/>
                <tag name="@param" text="policyFile the path of the policy file."/>
                <parameter name="modelPath">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="policyFile">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
            <constructor name="SyncedEnforcer" signature="(java.lang.String, org.casbin.jcasbin.persist.Adapter)" qualified="org.casbin.jcasbin.main.SyncedEnforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>SyncedEnforcer initializes an enforcer with a database adapter.</comment>
                <tag name="@param" text="modelPath the path of the model file."/>
                <tag name="@param" text="adapter   the adapter."/>
                <parameter name="modelPath">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="adapter">
                    <type qualified="org.casbin.jcasbin.persist.Adapter"/>
                </parameter>
            </constructor>
            <constructor name="SyncedEnforcer" signature="(org.casbin.jcasbin.model.Model, org.casbin.jcasbin.persist.Adapter)" qualified="org.casbin.jcasbin.main.SyncedEnforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>SyncedEnforcer initializes an enforcer with a model and a database adapter.</comment>
                <tag name="@param" text="m       the model."/>
                <tag name="@param" text="adapter the adapter."/>
                <parameter name="m">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
                <parameter name="adapter">
                    <type qualified="org.casbin.jcasbin.persist.Adapter"/>
                </parameter>
            </constructor>
            <constructor name="SyncedEnforcer" signature="(org.casbin.jcasbin.model.Model)" qualified="org.casbin.jcasbin.main.SyncedEnforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>SyncedEnforcer initializes an enforcer with a model.</comment>
                <tag name="@param" text="m the model."/>
                <parameter name="m">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
            </constructor>
            <constructor name="SyncedEnforcer" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>SyncedEnforcer initializes an enforcer with a model file.</comment>
                <tag name="@param" text="modelPath the path of the model file."/>
                <parameter name="modelPath">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
            <constructor name="SyncedEnforcer" signature="(java.lang.String, java.lang.String, boolean)" qualified="org.casbin.jcasbin.main.SyncedEnforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>SyncedEnforcer initializes an enforcer with a model file, a policy file and an enable log flag.</comment>
                <tag name="@param" text="modelPath  the path of the model file."/>
                <tag name="@param" text="policyFile the path of the policy file."/>
                <tag name="@param" text="enableLog  whether to enable Casbin's log."/>
                <parameter name="modelPath">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="policyFile">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="enableLog">
                    <type qualified="boolean"/>
                </parameter>
            </constructor>
            <method name="getRolesForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.getRolesForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getRolesForUser gets the roles that a user has.</comment>
                <tag name="@param" text="name the user."/>
                <tag name="@return" text="the roles that the user has."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="getUsersForRole" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.getUsersForRole" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getUsersForRole gets the users that has a role.</comment>
                <tag name="@param" text="name the role."/>
                <tag name="@return" text="the users that has the role."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="hasRoleForUser" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.hasRoleForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>hasRoleForUser determines whether a user has a role.</comment>
                <tag name="@param" text="name the user."/>
                <tag name="@param" text="role the role."/>
                <tag name="@return" text="whether the user has the role."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="addRoleForUser" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.addRoleForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addRoleForUser adds a role for a user.
 Returns false if the user already has the role (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="role the role."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deleteRoleForUser" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deleteRoleForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteRoleForUser deletes a role for a user.
 Returns false if the user does not have the role (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@param" text="role the role."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deleteRolesForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deleteRolesForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteRolesForUser deletes all roles for a user.
 Returns false if the user does not have any roles (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deleteUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deleteUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteUser deletes a user.
 Returns false if the user does not exist (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deleteRole" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deleteRole" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteRole deletes a role.</comment>
                <tag name="@param" text="role the role."/>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deletePermission" signature="(java.lang.String...)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deletePermission" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>deletePermission deletes a permission.
 Returns false if the permission does not exist (aka not affected).</comment>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="permission">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deletePermission" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deletePermission" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deletePermission deletes a permission.
 Returns false if the permission does not exist (aka not affected).</comment>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="permission">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="addPermissionForUser" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.addPermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>addPermissionForUser adds a permission for a user or role.
 Returns false if the user or role already has the permission (aka not affected).</comment>
                <tag name="@param" text="user       the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="addPermissionForUser" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.addPermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addPermissionForUser adds a permission for a user or role.
 Returns false if the user or role already has the permission (aka not affected).</comment>
                <tag name="@param" text="user       the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deletePermissionForUser" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deletePermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>deletePermissionForUser deletes a permission for a user or role.
 Returns false if the user or role does not have the permission (aka not affected).</comment>
                <tag name="@param" text="user       the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deletePermissionForUser" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deletePermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deletePermissionForUser deletes a permission for a user or role.
 Returns false if the user or role does not have the permission (aka not affected).</comment>
                <tag name="@param" text="user       the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deletePermissionsForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deletePermissionsForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deletePermissionsForUser deletes permissions for a user or role.
 Returns false if the user or role does not have any permissions (aka not affected).</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="getPermissionsForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.getPermissionsForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getPermissionsForUser gets permissions for a user or role.</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="the permissions, a permission is usually like (obj, act). It is actually the rule without the subject."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="hasPermissionForUser" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.hasPermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>hasPermissionForUser determines whether a user has a permission.</comment>
                <tag name="@param" text="user       the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="whether the user has the permission."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="hasPermissionForUser" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.hasPermissionForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>hasPermissionForUser determines whether a user has a permission.</comment>
                <tag name="@param" text="user       the user."/>
                <tag name="@param" text="permission the permission, usually be (obj, act). It is actually the rule without the subject."/>
                <tag name="@return" text="whether the user has the permission."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="permission">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="getRolesForUserInDomain" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.getRolesForUserInDomain" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getRolesForUserInDomain gets the roles that a user has inside a domain.</comment>
                <tag name="@param" text="name   the user."/>
                <tag name="@param" text="domain the domain."/>
                <tag name="@return" text="the roles that the user has in the domain."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="getPermissionsForUserInDomain" signature="(java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.getPermissionsForUserInDomain" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getPermissionsForUserInDomain gets permissions for a user or role inside a domain.</comment>
                <tag name="@param" text="user   the user."/>
                <tag name="@param" text="domain the domain."/>
                <tag name="@return" text="the permissions, a permission is usually like (obj, act). It is actually the rule without the subject."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="addRoleForUserInDomain" signature="(java.lang.String, java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.addRoleForUserInDomain" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addRoleForUserInDomain adds a role for a user inside a domain.
 Returns false if the user already has the role (aka not affected).</comment>
                <tag name="@param" text="user   the user."/>
                <tag name="@param" text="role   the role."/>
                <tag name="@param" text="domain the domain."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="deleteRoleForUserInDomain" signature="(java.lang.String, java.lang.String, java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.deleteRoleForUserInDomain" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>deleteRoleForUserInDomain deletes a role for a user inside a domain.
 Returns false if the user does not have the role (aka not affected).</comment>
                <tag name="@param" text="user   the user."/>
                <tag name="@param" text="role   the role."/>
                <tag name="@param" text="domain the domain."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="role">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="boolean"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="getImplicitRolesForUser" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.getImplicitRolesForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>getImplicitRolesForUser gets implicit roles that a user has.
 Compared to getRolesForUser(), this function retrieves indirect roles besides direct roles.
 For example:
 g, alice, role:admin
 g, role:admin, role:user
 &lt;p&gt;
 getRolesForUser("alice") can only get: ["role:admin"].
 But getImplicitRolesForUser("alice") will get: ["role:admin", "role:user"].</comment>
                <tag name="@param" text="name   the user"/>
                <tag name="@param" text="domain the domain"/>
                <tag name="@return" text="implicit roles that a user has."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="domain">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="getImplicitPermissionsForUser" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.SyncedEnforcer.getImplicitPermissionsForUser" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getImplicitPermissionsForUser gets implicit permissions for a user or role.
 Compared to getPermissionsForUser(), this function retrieves permissions for inherited roles.
 For example:
 p, admin, data1, read
 p, alice, data2, read
 g, alice, admin
 &lt;p&gt;
 getPermissionsForUser("alice") can only get: [["alice", "data2", "read"]].
 But getImplicitPermissionsForUser("alice") will get: [["admin", "data1", "read"], ["alice", "data2", "read"]].</comment>
                <tag name="@param" text="user the user."/>
                <tag name="@return" text="implicit permissions for a user or role."/>
                <parameter name="user">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
        </class>
        <class name="ManagementEnforcer" qualified="org.casbin.jcasbin.main.ManagementEnforcer" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>ManagementEnforcer = InternalEnforcer + Management API.</comment>
            <class qualified="org.casbin.jcasbin.main.InternalEnforcer"/>
            <constructor name="ManagementEnforcer" signature="()" qualified="org.casbin.jcasbin.main.ManagementEnforcer" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="getAllSubjects" signature="()" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getAllSubjects" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getAllSubjects gets the list of subjects that show up in the current policy.</comment>
                <tag name="@return" text="all the subjects in &quot;p&quot; policy rules. It actually collects the&#xA;         0-index elements of &quot;p&quot; policy rules. So make sure your subject&#xA;         is the 0-index element, like (sub, obj, act). Duplicates are removed."/>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getAllNamedSubjects" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getAllNamedSubjects" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>GetAllNamedSubjects gets the list of subjects that show up in the currentnamed policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@return" text="all the subjects in policy rules of the ptype type. It actually&#xA;         collects the 0-index elements of the policy rules. So make sure&#xA;         your subject is the 0-index element, like (sub, obj, act).&#xA;         Duplicates are removed."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getAllObjects" signature="()" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getAllObjects" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getAllObjects gets the list of objects that show up in the current policy.</comment>
                <tag name="@return" text="all the objects in &quot;p&quot; policy rules. It actually collects the&#xA;         1-index elements of &quot;p&quot; policy rules. So make sure your object&#xA;         is the 1-index element, like (sub, obj, act).&#xA;         Duplicates are removed."/>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getAllNamedObjects" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getAllNamedObjects" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getAllNamedObjects gets the list of objects that show up in the current named policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@return" text="all the objects in policy rules of the ptype type. It actually&#xA;         collects the 1-index elements of the policy rules. So make sure&#xA;         your object is the 1-index element, like (sub, obj, act).&#xA;         Duplicates are removed."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getAllActions" signature="()" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getAllActions" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getAllActions gets the list of actions that show up in the current policy.</comment>
                <tag name="@return" text="all the actions in &quot;p&quot; policy rules. It actually collects&#xA;         the 2-index elements of &quot;p&quot; policy rules. So make sure your action&#xA;         is the 2-index element, like (sub, obj, act).&#xA;         Duplicates are removed."/>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getAllNamedActions" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getAllNamedActions" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>GetAllNamedActions gets the list of actions that show up in the current named policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@return" text="all the actions in policy rules of the ptype type. It actually&#xA;         collects the 2-index elements of the policy rules. So make sure&#xA;         your action is the 2-index element, like (sub, obj, act).&#xA;         Duplicates are removed."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getAllRoles" signature="()" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getAllRoles" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getAllRoles gets the list of roles that show up in the current policy.</comment>
                <tag name="@return" text="all the roles in &quot;g&quot; policy rules. It actually collects&#xA;         the 1-index elements of &quot;g&quot; policy rules. So make sure your&#xA;         role is the 1-index element, like (sub, role).&#xA;         Duplicates are removed."/>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getAllNamedRoles" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getAllNamedRoles" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getAllNamedRoles gets the list of roles that show up in the current named policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@return" text="all the subjects in policy rules of the ptype type. It actually&#xA;         collects the 0-index elements of the policy rules. So make&#xA;         sure your subject is the 0-index element, like (sub, obj, act).&#xA;         Duplicates are removed."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.lang.String"/>
                </return>
            </method>
            <method name="getPolicy" signature="()" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getPolicy gets all the authorization rules in the policy.</comment>
                <tag name="@return" text="all the &quot;p&quot; policy rules."/>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="getFilteredPolicy" signature="(int, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getFilteredPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>getFilteredPolicy gets all the authorization rules in the policy, field filters can be specified.</comment>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <tag name="@return" text="the filtered &quot;p&quot; policy rules."/>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="getNamedPolicy" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getNamedPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getNamedPolicy gets all the authorization rules in the named policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@return" text="the &quot;p&quot; policy rules of the specified ptype."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="getFilteredNamedPolicy" signature="(java.lang.String, int, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getFilteredNamedPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>getFilteredNamedPolicy gets all the authorization rules in the named policy, field filters can be specified.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <tag name="@return" text="the filtered &quot;p&quot; policy rules of the specified ptype."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="getGroupingPolicy" signature="()" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getGroupingPolicy gets all the role inheritance rules in the policy.</comment>
                <tag name="@return" text="all the &quot;g&quot; policy rules."/>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="getFilteredGroupingPolicy" signature="(int, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getFilteredGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>getFilteredGroupingPolicy gets all the role inheritance rules in the policy, field filters can be specified.</comment>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                          means not to match this field."/>
                <tag name="@return" text="the filtered &quot;g&quot; policy rules."/>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="getNamedGroupingPolicy" signature="(java.lang.String)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getNamedGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>getNamedGroupingPolicy gets all the role inheritance rules in the policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@return" text="the &quot;g&quot; policy rules of the specified ptype."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="getFilteredNamedGroupingPolicy" signature="(java.lang.String, int, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.getFilteredNamedGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>getFilteredNamedGroupingPolicy gets all the role inheritance rules in the policy, field filters can be specified.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <tag name="@return" text="the filtered &quot;g&quot; policy rules of the specified ptype."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="java.util.List">
                    <generic qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </generic>
                </return>
            </method>
            <method name="hasPolicy" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.hasPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>hasPolicy determines whether an authorization rule exists.</comment>
                <tag name="@param" text="params the &quot;p&quot; policy rule, ptype &quot;p&quot; is implicitly used."/>
                <tag name="@return" text="whether the rule exists."/>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="hasPolicy" signature="(java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.hasPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>hasPolicy determines whether an authorization rule exists.</comment>
                <tag name="@param" text="params the &quot;p&quot; policy rule, ptype &quot;p&quot; is implicitly used."/>
                <tag name="@return" text="whether the rule exists."/>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="hasNamedPolicy" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.hasNamedPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>hasNamedPolicy determines whether a named authorization rule exists.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@param" text="params the &quot;p&quot; policy rule."/>
                <tag name="@return" text="whether the rule exists."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="hasNamedPolicy" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.hasNamedPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>hasNamedPolicy determines whether a named authorization rule exists.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@param" text="params the &quot;p&quot; policy rule."/>
                <tag name="@return" text="whether the rule exists."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addPolicy" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.addPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addPolicy adds an authorization rule to the current policy.
 If the rule already exists, the function returns false and the rule will not be added.
 Otherwise the function returns true by adding the new rule.</comment>
                <tag name="@param" text="params the &quot;p&quot; policy rule, ptype &quot;p&quot; is implicitly used."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addPolicy" signature="(java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.addPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>addPolicy adds an authorization rule to the current policy.
 If the rule already exists, the function returns false and the rule will not be added.
 Otherwise the function returns true by adding the new rule.</comment>
                <tag name="@param" text="params the &quot;p&quot; policy rule, ptype &quot;p&quot; is implicitly used."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addNamedPolicy" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.addNamedPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>AddNamedPolicy adds an authorization rule to the current named policy.
 If the rule already exists, the function returns false and the rule will not be added.
 Otherwise the function returns true by adding the new rule.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@param" text="params the &quot;p&quot; policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addNamedPolicy" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.addNamedPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>AddNamedPolicy adds an authorization rule to the current named policy.
 If the rule already exists, the function returns false and the rule will not be added.
 Otherwise the function returns true by adding the new rule.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@param" text="params the &quot;p&quot; policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removePolicy" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removePolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>removePolicy removes an authorization rule from the current policy.</comment>
                <tag name="@param" text="params the &quot;p&quot; policy rule, ptype &quot;p&quot; is implicitly used."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removePolicy" signature="(java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removePolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removePolicy removes an authorization rule from the current policy.</comment>
                <tag name="@param" text="params the &quot;p&quot; policy rule, ptype &quot;p&quot; is implicitly used."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeFilteredPolicy" signature="(int, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeFilteredPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeFilteredPolicy removes an authorization rule from the current policy, field filters can be specified.</comment>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeNamedPolicy" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeNamedPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>removeNamedPolicy removes an authorization rule from the current named policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@param" text="params the &quot;p&quot; policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeNamedPolicy" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeNamedPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeNamedPolicy removes an authorization rule from the current named policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@param" text="params the &quot;p&quot; policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeFilteredNamedPolicy" signature="(java.lang.String, int, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeFilteredNamedPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeFilteredNamedPolicy removes an authorization rule from the current named policy, field filters can be specified.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;p&quot;, &quot;p2&quot;, &quot;p3&quot;, .."/>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="hasGroupingPolicy" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.hasGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>hasGroupingPolicy determines whether a role inheritance rule exists.</comment>
                <tag name="@param" text="params the &quot;g&quot; policy rule, ptype &quot;g&quot; is implicitly used."/>
                <tag name="@return" text="whether the rule exists."/>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="hasGroupingPolicy" signature="(java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.hasGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>hasGroupingPolicy determines whether a role inheritance rule exists.</comment>
                <tag name="@param" text="params the &quot;g&quot; policy rule, ptype &quot;g&quot; is implicitly used."/>
                <tag name="@return" text="whether the rule exists."/>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="hasNamedGroupingPolicy" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.hasNamedGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>hasNamedGroupingPolicy determines whether a named role inheritance rule exists.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@param" text="params the &quot;g&quot; policy rule."/>
                <tag name="@return" text="whether the rule exists."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="hasNamedGroupingPolicy" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.hasNamedGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>hasNamedGroupingPolicy determines whether a named role inheritance rule exists.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@param" text="params the &quot;g&quot; policy rule."/>
                <tag name="@return" text="whether the rule exists."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addGroupingPolicy" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.addGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addGroupingPolicy adds a role inheritance rule to the current policy.
 If the rule already exists, the function returns false and the rule will not be added.
 Otherwise the function returns true by adding the new rule.</comment>
                <tag name="@param" text="params the &quot;g&quot; policy rule, ptype &quot;g&quot; is implicitly used."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addGroupingPolicy" signature="(java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.addGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>addGroupingPolicy adds a role inheritance rule to the current policy.
 If the rule already exists, the function returns false and the rule will not be added.
 Otherwise the function returns true by adding the new rule.</comment>
                <tag name="@param" text="params the &quot;g&quot; policy rule, ptype &quot;g&quot; is implicitly used."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addNamedGroupingPolicy" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.addNamedGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addNamedGroupingPolicy adds a named role inheritance rule to the current policy.
 If the rule already exists, the function returns false and the rule will not be added.
 Otherwise the function returns true by adding the new rule.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@param" text="params the &quot;g&quot; policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addNamedGroupingPolicy" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.addNamedGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>addNamedGroupingPolicy adds a named role inheritance rule to the current policy.
 If the rule already exists, the function returns false and the rule will not be added.
 Otherwise the function returns true by adding the new rule.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@param" text="params the &quot;g&quot; policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeGroupingPolicy" signature="(java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>removeGroupingPolicy removes a role inheritance rule from the current policy.</comment>
                <tag name="@param" text="params the &quot;g&quot; policy rule, ptype &quot;g&quot; is implicitly used."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeGroupingPolicy" signature="(java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeGroupingPolicy removes a role inheritance rule from the current policy.</comment>
                <tag name="@param" text="params the &quot;g&quot; policy rule, ptype &quot;g&quot; is implicitly used."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeFilteredGroupingPolicy" signature="(int, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeFilteredGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeFilteredGroupingPolicy removes a role inheritance rule from the current policy, field filters can be specified.</comment>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeNamedGroupingPolicy" signature="(java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeNamedGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>removeNamedGroupingPolicy removes a role inheritance rule from the current named policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@param" text="params the &quot;g&quot; policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeNamedGroupingPolicy" signature="(java.lang.String, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeNamedGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeNamedGroupingPolicy removes a role inheritance rule from the current named policy.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@param" text="params the &quot;g&quot; policy rule."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="params">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="removeFilteredNamedGroupingPolicy" signature="(java.lang.String, int, java.lang.String...)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.removeFilteredNamedGroupingPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeFilteredNamedGroupingPolicy removes a role inheritance rule from the current named policy, field filters can be specified.</comment>
                <tag name="@param" text="ptype the policy type, can be &quot;g&quot;, &quot;g2&quot;, &quot;g3&quot;, .."/>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <tag name="@return" text="succeeds or not."/>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="boolean"/>
            </method>
            <method name="addFunction" signature="(java.lang.String, com.googlecode.aviator.runtime.type.AviatorFunction)" qualified="org.casbin.jcasbin.main.ManagementEnforcer.addFunction" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addFunction adds a customized function.</comment>
                <tag name="@param" text="name the name of the new function."/>
                <tag name="@param" text="function the function."/>
                <parameter name="name">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="function">
                    <type qualified="com.googlecode.aviator.runtime.type.AviatorFunction"/>
                </parameter>
                <return qualified="void"/>
            </method>
        </class>
    </package>
    <package name="org.casbin.jcasbin.exception">
        <class name="CasbinConfigException" qualified="org.casbin.jcasbin.exception.CasbinConfigException" scope="public" abstract="false" error="false" exception="true" externalizable="false" included="true" serializable="true">
            <class qualified="java.lang.RuntimeException"/>
            <constructor name="CasbinConfigException" signature="(java.lang.String, java.lang.Throwable)" qualified="org.casbin.jcasbin.exception.CasbinConfigException" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="message">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="cause">
                    <type qualified="java.lang.Throwable"/>
                </parameter>
            </constructor>
        </class>
        <class name="CasbinMatcherException" qualified="org.casbin.jcasbin.exception.CasbinMatcherException" scope="public" abstract="false" error="false" exception="true" externalizable="false" included="true" serializable="true">
            <class qualified="java.lang.RuntimeException"/>
            <constructor name="CasbinMatcherException" signature="(java.lang.String)" qualified="org.casbin.jcasbin.exception.CasbinMatcherException" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="message">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
            <constructor name="CasbinMatcherException" signature="(java.lang.String, java.lang.Throwable)" qualified="org.casbin.jcasbin.exception.CasbinMatcherException" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="message">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="cause">
                    <type qualified="java.lang.Throwable"/>
                </parameter>
            </constructor>
        </class>
        <class name="CasbinAdapterException" qualified="org.casbin.jcasbin.exception.CasbinAdapterException" scope="public" abstract="false" error="false" exception="true" externalizable="false" included="true" serializable="true">
            <class qualified="java.lang.RuntimeException"/>
            <constructor name="CasbinAdapterException" signature="(java.lang.String)" qualified="org.casbin.jcasbin.exception.CasbinAdapterException" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="message">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
            <constructor name="CasbinAdapterException" signature="(java.lang.String, java.lang.Throwable)" qualified="org.casbin.jcasbin.exception.CasbinAdapterException" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="message">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="cause">
                    <type qualified="java.lang.Throwable"/>
                </parameter>
            </constructor>
        </class>
        <class name="CasbinPolicyFileNotFoundException" qualified="org.casbin.jcasbin.exception.CasbinPolicyFileNotFoundException" scope="public" abstract="false" error="false" exception="true" externalizable="false" included="true" serializable="true">
            <class qualified="java.lang.RuntimeException"/>
            <constructor name="CasbinPolicyFileNotFoundException" signature="(java.lang.String)" qualified="org.casbin.jcasbin.exception.CasbinPolicyFileNotFoundException" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="message">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
        </class>
    </package>
    <package name="org.casbin.jcasbin.persist">
        <interface name="Adapter" qualified="org.casbin.jcasbin.persist.Adapter" scope="public" included="true">
            <comment>Adapter is the interface for Casbin adapters.</comment>
            <method name="loadPolicy" signature="(org.casbin.jcasbin.model.Model)" qualified="org.casbin.jcasbin.persist.Adapter.loadPolicy" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>loadPolicy loads all policy rules from the storage.</comment>
                <tag name="@param" text="model the model."/>
                <parameter name="model">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="savePolicy" signature="(org.casbin.jcasbin.model.Model)" qualified="org.casbin.jcasbin.persist.Adapter.savePolicy" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>savePolicy saves all policy rules to the storage.</comment>
                <tag name="@param" text="model the model."/>
                <parameter name="model">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="addPolicy" signature="(java.lang.String, java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.persist.Adapter.addPolicy" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addPolicy adds a policy rule to the storage.
 This is part of the Auto-Save feature.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="rule the rule, like (sub, obj, act)."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="rule">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="removePolicy" signature="(java.lang.String, java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.persist.Adapter.removePolicy" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>removePolicy removes a policy rule from the storage.
 This is part of the Auto-Save feature.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="rule the rule, like (sub, obj, act)."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="rule">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="removeFilteredPolicy" signature="(java.lang.String, java.lang.String, int, java.lang.String...)" qualified="org.casbin.jcasbin.persist.Adapter.removeFilteredPolicy" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeFilteredPolicy removes policy rules that match the filter from the storage.
 This is part of the Auto-Save feature.</comment>
                <tag name="@param" text="sec the section, &quot;p&quot; or &quot;g&quot;."/>
                <tag name="@param" text="ptype the policy type, &quot;p&quot;, &quot;p2&quot;, .. or &quot;g&quot;, &quot;g2&quot;, .."/>
                <tag name="@param" text="fieldIndex the policy rule's start index to be matched."/>
                <tag name="@param" text="fieldValues the field values to be matched, value &quot;&quot;&#xA;                    means not to match this field."/>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
            </method>
        </interface>
        <interface name="Watcher" qualified="org.casbin.jcasbin.persist.Watcher" scope="public" included="true">
            <comment>Watcher is the interface for Casbin watchers.</comment>
            <method name="setUpdateCallback" signature="(java.lang.Runnable)" qualified="org.casbin.jcasbin.persist.Watcher.setUpdateCallback" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>SetUpdateCallback sets the callback function that the watcher will call
 when the policy in DB has been changed by other instances.
 A classic callback is Enforcer.loadPolicy().</comment>
                <tag name="@param" text="runnable the callback function, will be called when policy is updated."/>
                <parameter name="runnable">
                    <type qualified="java.lang.Runnable"/>
                </parameter>
                <return qualified="void"/>
            </method>
            <method name="update" signature="()" qualified="org.casbin.jcasbin.persist.Watcher.update" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>Update calls the update callback of other instances to synchronize their policy.
 It is usually called after changing the policy in DB, like Enforcer.savePolicy(),
 Enforcer.addPolicy(), Enforcer.removePolicy(), etc.</comment>
                <return qualified="void"/>
            </method>
        </interface>
        <interface name="Helper.loadPolicyLineHandler" qualified="org.casbin.jcasbin.persist.Helper.loadPolicyLineHandler" scope="public" included="true">
            <generic name="T"/>
            <generic name="U"/>
            <method name="accept" signature="(T, U)" qualified="org.casbin.jcasbin.persist.Helper.loadPolicyLineHandler.accept" scope="public" abstract="true" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <parameter name="t">
                    <type qualified="T"/>
                </parameter>
                <parameter name="u">
                    <type qualified="U"/>
                </parameter>
                <return qualified="void"/>
            </method>
        </interface>
        <class name="Helper" qualified="org.casbin.jcasbin.persist.Helper" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <class qualified="java.lang.Object"/>
            <constructor name="Helper" signature="()" qualified="org.casbin.jcasbin.persist.Helper" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false"/>
            <method name="loadPolicyLine" signature="(java.lang.String, org.casbin.jcasbin.model.Model)" qualified="org.casbin.jcasbin.persist.Helper.loadPolicyLine" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="true" varArgs="false">
                <parameter name="line">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="model">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
                <return qualified="void"/>
            </method>
        </class>
    </package>
    <package name="org.casbin.jcasbin.persist.file_adapter">
        <class name="FileAdapter" qualified="org.casbin.jcasbin.persist.file_adapter.FileAdapter" scope="public" abstract="false" error="false" exception="false" externalizable="false" included="true" serializable="false">
            <comment>FileAdapter is the file adapter for Casbin.
 It can load policy from file or save policy to file.</comment>
            <class qualified="java.lang.Object"/>
            <interface qualified="org.casbin.jcasbin.persist.Adapter"/>
            <constructor name="FileAdapter" signature="(java.lang.String)" qualified="org.casbin.jcasbin.persist.file_adapter.FileAdapter" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>FileAdapter is the constructor for FileAdapter.</comment>
                <tag name="@param" text="filePath the path of the policy file."/>
                <parameter name="filePath">
                    <type qualified="java.lang.String"/>
                </parameter>
            </constructor>
            <constructor name="FileAdapter" signature="(java.io.InputStream)" qualified="org.casbin.jcasbin.persist.file_adapter.FileAdapter" scope="public" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>FileAdapter is the constructor for FileAdapter.</comment>
                <tag name="@param" text="inputStream the policy file.inputStream"/>
                <parameter name="inputStream">
                    <type qualified="java.io.InputStream"/>
                </parameter>
            </constructor>
            <method name="loadPolicy" signature="(org.casbin.jcasbin.model.Model)" qualified="org.casbin.jcasbin.persist.file_adapter.FileAdapter.loadPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>loadPolicy loads all policy rules from the storage.</comment>
                <parameter name="model">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="savePolicy" signature="(org.casbin.jcasbin.model.Model)" qualified="org.casbin.jcasbin.persist.file_adapter.FileAdapter.savePolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>savePolicy saves all policy rules to the storage.</comment>
                <parameter name="model">
                    <type qualified="org.casbin.jcasbin.model.Model"/>
                </parameter>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="addPolicy" signature="(java.lang.String, java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.persist.file_adapter.FileAdapter.addPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>addPolicy adds a policy rule to the storage.</comment>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="rule">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="removePolicy" signature="(java.lang.String, java.lang.String, java.util.List&lt;java.lang.String&gt;)" qualified="org.casbin.jcasbin.persist.file_adapter.FileAdapter.removePolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="false">
                <comment>removePolicy removes a policy rule from the storage.</comment>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="rule">
                    <type qualified="java.util.List">
                        <generic qualified="java.lang.String"/>
                    </type>
                </parameter>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
            <method name="removeFilteredPolicy" signature="(java.lang.String, java.lang.String, int, java.lang.String...)" qualified="org.casbin.jcasbin.persist.file_adapter.FileAdapter.removeFilteredPolicy" scope="public" abstract="false" final="false" included="true" native="false" synchronized="false" static="false" varArgs="true">
                <comment>removeFilteredPolicy removes policy rules that match the filter from the storage.</comment>
                <parameter name="sec">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="ptype">
                    <type qualified="java.lang.String"/>
                </parameter>
                <parameter name="fieldIndex">
                    <type qualified="int"/>
                </parameter>
                <parameter name="fieldValues">
                    <type qualified="java.lang.String" dimension="[]"/>
                </parameter>
                <return qualified="void"/>
                <annotation name="Override" qualified="java.lang.Override"/>
            </method>
        </class>
    </package>
</root>
